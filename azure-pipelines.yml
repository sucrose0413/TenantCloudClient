# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pr:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  nugetPackages: '**\*.nupkg'

stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
            vmImage: 'windows-latest'

        steps:
        - task: GitVersion@4
          inputs:
            updateAssemblyInfo: false

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'

        - task: VSBuild@1
          inputs:
            solution: '$(solution)'
            msbuildArgs: '/p:Version=$(GitVersion.AssemblySemVer) /p:PackageVersion=$(GitVersion.FullSemVer) /p:AssemblyVersion=$(GitVersion.AssemblySemVer) /p:FileVersion=$(GitVersion.AssemblySemFileVer) /p:InformationalVersion=$(GitVersion.InformationalVersion) /p:SkipInvalidConfigurations=true'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
            restoreNugetPackages: true

        - task: CopyFiles@2
          inputs:
            SourceFolder: $(build.sourcesdirectory)
            Contents: $(nugetPackages)
            TargetFolder: $(build.artifactstagingdirectory)
            CleanTargetFolder: false
            OverWrite: false
            flattenFolders: true

        - task: VSTest@2
          inputs:
            testSelector: 'testAssemblies'
            testAssemblyVer2: |
                **\*tests.dll
                !**\*TestAdapter.dll
                !**\obj\**
            searchFolder: '$(System.DefaultWorkingDirectory)'
            runTestsInIsolation: true
            codeCoverageEnabled: true
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
            failOnMinTestsNotRun: true
            minimumExpectedTests: '5'

        - task: PublishBuildArtifacts@1
          condition: always()
          inputs:
            PathtoPublish: $(build.artifactstagingdirectory)
            ArtifactName: NugetPackages
            ArtifactType: Container

  - stage: Publish
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - deployment: PublishNuget
        environment: nuget_org
        strategy:
          runOnce:
             deploy:
                steps:
                  - task: NuGetCommand@2
                    inputs:
                      command: 'push'
                      packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
                      nuGetFeedType: 'external'
                      publishFeedCredentials: 'nuget.org-carldebilly'
